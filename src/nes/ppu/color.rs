use super::pixel::Pixel;
use crate::prelude::*;
use lazy_static::lazy_static;

#[derive(Default, Debug, Clone, Copy)]
pub struct Color {
    pub r: Byte,
    pub g: Byte,
    pub b: Byte,
}

impl Color {
    pub fn new(r: Byte, g: Byte, b: Byte) -> Self {
        Self { r, g, b }
    }
}

const SIZE: usize = 64;

lazy_static! {
    pub static ref COLORS: [Color; SIZE] = [
        Color::new(Byte(0x80), Byte(0x80), Byte(0x80)),
        Color::new(Byte(0x00), Byte(0x3D), Byte(0xA6)),
        Color::new(Byte(0x00), Byte(0x12), Byte(0xB0)),
        Color::new(Byte(0x44), Byte(0x00), Byte(0x96)),
        Color::new(Byte(0xA1), Byte(0x00), Byte(0x5E)),
        Color::new(Byte(0xC7), Byte(0x00), Byte(0x28)),
        Color::new(Byte(0xBA), Byte(0x06), Byte(0x00)),
        Color::new(Byte(0x8C), Byte(0x17), Byte(0x00)),
        Color::new(Byte(0x5C), Byte(0x2F), Byte(0x00)),
        Color::new(Byte(0x10), Byte(0x45), Byte(0x00)),
        Color::new(Byte(0x05), Byte(0x4A), Byte(0x00)),
        Color::new(Byte(0x00), Byte(0x47), Byte(0x2E)),
        Color::new(Byte(0x00), Byte(0x41), Byte(0x66)),
        Color::new(Byte(0x00), Byte(0x00), Byte(0x00)),
        Color::new(Byte(0x05), Byte(0x05), Byte(0x05)),
        Color::new(Byte(0x05), Byte(0x05), Byte(0x05)),
        Color::new(Byte(0xC7), Byte(0xC7), Byte(0xC7)),
        Color::new(Byte(0x00), Byte(0x77), Byte(0xFF)),
        Color::new(Byte(0x21), Byte(0x55), Byte(0xFF)),
        Color::new(Byte(0x82), Byte(0x37), Byte(0xFA)),
        Color::new(Byte(0xEB), Byte(0x2F), Byte(0xB5)),
        Color::new(Byte(0xFF), Byte(0x29), Byte(0x50)),
        Color::new(Byte(0xFF), Byte(0x22), Byte(0x00)),
        Color::new(Byte(0xD6), Byte(0x32), Byte(0x00)),
        Color::new(Byte(0xC4), Byte(0x62), Byte(0x00)),
        Color::new(Byte(0x35), Byte(0x80), Byte(0x00)),
        Color::new(Byte(0x05), Byte(0x8F), Byte(0x00)),
        Color::new(Byte(0x00), Byte(0x8A), Byte(0x55)),
        Color::new(Byte(0x00), Byte(0x99), Byte(0xCC)),
        Color::new(Byte(0x21), Byte(0x21), Byte(0x21)),
        Color::new(Byte(0x09), Byte(0x09), Byte(0x09)),
        Color::new(Byte(0x09), Byte(0x09), Byte(0x09)),
        Color::new(Byte(0xFF), Byte(0xFF), Byte(0xFF)),
        Color::new(Byte(0x0F), Byte(0xD7), Byte(0xFF)),
        Color::new(Byte(0x69), Byte(0xA2), Byte(0xFF)),
        Color::new(Byte(0xD4), Byte(0x80), Byte(0xFF)),
        Color::new(Byte(0xFF), Byte(0x45), Byte(0xF3)),
        Color::new(Byte(0xFF), Byte(0x61), Byte(0x8B)),
        Color::new(Byte(0xFF), Byte(0x88), Byte(0x33)),
        Color::new(Byte(0xFF), Byte(0x9C), Byte(0x12)),
        Color::new(Byte(0xFA), Byte(0xBC), Byte(0x20)),
        Color::new(Byte(0x9F), Byte(0xE3), Byte(0x0E)),
        Color::new(Byte(0x2B), Byte(0xF0), Byte(0x35)),
        Color::new(Byte(0x0C), Byte(0xF0), Byte(0xA4)),
        Color::new(Byte(0x05), Byte(0xFB), Byte(0xFF)),
        Color::new(Byte(0x5E), Byte(0x5E), Byte(0x5E)),
        Color::new(Byte(0x0D), Byte(0x0D), Byte(0x0D)),
        Color::new(Byte(0x0D), Byte(0x0D), Byte(0x0D)),
        Color::new(Byte(0xFF), Byte(0xFF), Byte(0xFF)),
        Color::new(Byte(0xA6), Byte(0xFC), Byte(0xFF)),
        Color::new(Byte(0xB3), Byte(0xEC), Byte(0xFF)),
        Color::new(Byte(0xDA), Byte(0xAB), Byte(0xEB)),
        Color::new(Byte(0xFF), Byte(0xA8), Byte(0xF9)),
        Color::new(Byte(0xFF), Byte(0xAB), Byte(0xB3)),
        Color::new(Byte(0xFF), Byte(0xD2), Byte(0xB0)),
        Color::new(Byte(0xFF), Byte(0xEF), Byte(0xA6)),
        Color::new(Byte(0xFF), Byte(0xF7), Byte(0x9C)),
        Color::new(Byte(0xD7), Byte(0xE8), Byte(0x95)),
        Color::new(Byte(0xA6), Byte(0xED), Byte(0xAF)),
        Color::new(Byte(0xA2), Byte(0xF2), Byte(0xDA)),
        Color::new(Byte(0x99), Byte(0xFF), Byte(0xFC)),
        Color::new(Byte(0xDD), Byte(0xDD), Byte(0xDD)),
        Color::new(Byte(0x11), Byte(0x11), Byte(0x11)),
        Color::new(Byte(0x11), Byte(0x11), Byte(0x11)),
    ];
}

// Color::new(Byte(84), Byte(84), Byte(84)),
// Color::new(Byte(0), Byte(30), Byte(116)),
// Color::new(Byte(8), Byte(16), Byte(144)),
// Color::new(Byte(48), Byte(0), Byte(136)),
// Color::new(Byte(68), Byte(0), Byte(100)),
// Color::new(Byte(92), Byte(0), Byte(48)),
// Color::new(Byte(84), Byte(4), Byte(0)),
// Color::new(Byte(60), Byte(24), Byte(0)),
// Color::new(Byte(32), Byte(42), Byte(0)),
// Color::new(Byte(8), Byte(58), Byte(0)),
// Color::new(Byte(0), Byte(64), Byte(0)),
// Color::new(Byte(0), Byte(60), Byte(0)),
// Color::new(Byte(0), Byte(50), Byte(60)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(152), Byte(150), Byte(152)),
// Color::new(Byte(8), Byte(76), Byte(196)),
// Color::new(Byte(48), Byte(50), Byte(236)),
// Color::new(Byte(92), Byte(30), Byte(228)),
// Color::new(Byte(136), Byte(20), Byte(176)),
// Color::new(Byte(160), Byte(20), Byte(100)),
// Color::new(Byte(152), Byte(34), Byte(32)),
// Color::new(Byte(120), Byte(60), Byte(0)),
// Color::new(Byte(84), Byte(90), Byte(0)),
// Color::new(Byte(40), Byte(114), Byte(0)),
// Color::new(Byte(8), Byte(124), Byte(0)),
// Color::new(Byte(0), Byte(118), Byte(40)),
// Color::new(Byte(0), Byte(102), Byte(120)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(236), Byte(238), Byte(236)),
// Color::new(Byte(76), Byte(154), Byte(236)),
// Color::new(Byte(120), Byte(124), Byte(236)),
// Color::new(Byte(176), Byte(98), Byte(236)),
// Color::new(Byte(228), Byte(84), Byte(236)),
// Color::new(Byte(236), Byte(88), Byte(180)),
// Color::new(Byte(236), Byte(106), Byte(100)),
// Color::new(Byte(212), Byte(136), Byte(32)),
// Color::new(Byte(160), Byte(170), Byte(0)),
// Color::new(Byte(116), Byte(196), Byte(0)),
// Color::new(Byte(76), Byte(208), Byte(32)),
// Color::new(Byte(56), Byte(204), Byte(108)),
// Color::new(Byte(56), Byte(180), Byte(204)),
// Color::new(Byte(60), Byte(60), Byte(60)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(236), Byte(238), Byte(236)),
// Color::new(Byte(168), Byte(204), Byte(236)),
// Color::new(Byte(188), Byte(188), Byte(236)),
// Color::new(Byte(212), Byte(178), Byte(236)),
// Color::new(Byte(236), Byte(174), Byte(236)),
// Color::new(Byte(236), Byte(174), Byte(212)),
// Color::new(Byte(236), Byte(180), Byte(176)),
// Color::new(Byte(228), Byte(196), Byte(144)),
// Color::new(Byte(204), Byte(210), Byte(120)),
// Color::new(Byte(180), Byte(222), Byte(120)),
// Color::new(Byte(168), Byte(226), Byte(144)),
// Color::new(Byte(152), Byte(226), Byte(180)),
// Color::new(Byte(160), Byte(214), Byte(228)),
// Color::new(Byte(160), Byte(162), Byte(160)),
// Color::new(Byte(0), Byte(0), Byte(0)),
// Color::new(Byte(0), Byte(0), Byte(0)),
